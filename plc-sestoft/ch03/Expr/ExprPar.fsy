%{

  (* Parser specification for the simple expression language *)

  open Absyn

%}

/* 1. Define terminals(tokens) */

%token <int> CSTINT
%token <string> NAME
%token PLUS MINUS TIMES DIVIDE EQ
%token END IN LET
%token LPAR RPAR
%token EOF

/* 2. Define operator associativity and precedence */

/* Remove this two lines to see the shift errors */
/* Tip: fsyacc -v --module ExprPar ExprPar.fsy   */

%left MINUS PLUS /* lowest precedence */
%left TIMES      /* highest precedence */

/* 3. Define non terminals */

%start Main

%type <Absyn.Expr> Main

%%

Main:
    Expr EOF                            { $1                }
;

Expr:
  | NAME                                { Var $1            }
  | CSTINT                              { CstI $1           }
  | MINUS CSTINT                        { CstI (- $2)       }
  | LPAR Expr RPAR                      { $2                }
  | LET NAME EQ Expr IN Expr END        { Let($2, $4, $6)   }
  | Expr TIMES Expr                     { Prim("*", $1, $3) }
  | Expr PLUS  Expr                     { Prim("+", $1, $3) }
  | Expr MINUS Expr                     { Prim("-", $1, $3) }
;
