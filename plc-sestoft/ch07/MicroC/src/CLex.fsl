{

(* Lexer specification for micro-C, a small imperative language *)

module CLex

open Microsoft.FSharp.Text.Lexing
open CPar;

let lexemeAsString lexbuf = LexBuffer<char>.LexemeString lexbuf

// Scan reserved words as identifiers and use this function to distinguish them.
// NOTE: If the set of keywords is large, use a hashtable instead.
let keyword s =
    match s with
    | "int"     -> INT
    | "char"    -> CHAR
    | "if"      -> IF
    | "else"    -> ELSE
    | "while"   -> WHILE
    | "true"    -> CSTBOOL 1
    | "false"   -> CSTBOOL 0
    | "print"   -> PRINT
    | "println" -> PRINTLN
    | "void"    -> VOID
    | "null"    -> NULL
    | "return"  -> RETURN
    | _         -> NAME s

let cEscape s =
    match s with
    | "\\\\" -> '\\'
    | "\\\"" -> '\"'
    | "\\a"  -> '\007'
    | "\\b"  -> '\008'
    | "\\t"  -> '\t'
    | "\\n"  -> '\n'
    | "\\v"  -> '\011'
    | "\\f"  -> '\012'
    | "\\r"  -> '\r'
    | _      -> failwith "Lexer error: impossible mini-C escape"
}

rule Token = parse

(* <Integer-Literal> | <Identifier/Keyword> | <Punctuation> | <Operator> *)
  | ['0'-'9']+      { CSTINT (System.Int32.Parse (lexemeAsString lexbuf)) }
  | ['a'-'z''A'-'Z']['a'-'z''A'-'Z''0'-'9']*
                    { keyword (lexemeAsString lexbuf) }
  | '"'             { CSTSTRING (StringDef [] lexbuf) }

(* Punctuation *)
  | '='             { ASSIGN }
  | "&"             { AMP }
  | '('             { LPAR }
  | ')'             { RPAR }
  | '{'             { LBRACE }
  | '}'             { RBRACE }
  | '['             { LBRACK }
  | ']'             { RBRACK }
  | ';'             { SEMI }
  | ','             { COMMA }

(* Operators *)
  | '+'             { PLUS }
  | '-'             { MINUS }
  | '*'             { TIMES }
  | '/'             { DIV }
  | '%'             { MOD }
  | "!"             { NOT }
  | "=="            { EQ }
  | "!="            { NE }
  | '>'             { GT }
  | '<'             { LT }
  | ">="            { GE }
  | "<="            { LE }
  | "||"            { SEQOR }
  | "&&"            { SEQAND }

(* Blank *)
  | [' ' '\t' '\r'] { Token lexbuf }
  | '\n'            { lexbuf.EndPos <- lexbuf.EndPos.NextLine; Token lexbuf }

(* Comments *)
  | "//"            { EndLineComment lexbuf; Token lexbuf }
  | "/*"            { Comment lexbuf;        Token lexbuf }

  | _               { failwith "Lexer error: illegal mini-C symbol" }

// Helper functions that you can reuse in projects

and Comment = parse
   | eof            { EOF }
   | "/*"           { Comment lexbuf; Comment lexbuf }
   | "*/"           { () }
   | '\n'           { lexbuf.EndPos <- lexbuf.EndPos.NextLine; Comment lexbuf }
   | (eof | '\026') { failwith "Lexer error: unterminated comment" }
   | _              { Comment lexbuf }

and EndLineComment = parse
   | '\n'           { lexbuf.EndPos <- lexbuf.EndPos.NextLine }
   | (eof | '\026') { () }
   | _              { EndLineComment lexbuf }

and StringDef chars = parse
  | '"'
      { Microsoft.FSharp.Core.String.concat "" (List.map string (List.rev chars)) }
  | '\\' ['\\' '"' 'a' 'b' 't' 'n' 'v' 'f' 'r']
      { String (cEscape (lexemeAsString lexbuf) :: chars) lexbuf }
  | "''"
      { String ('\'' :: chars) lexbuf }
  | '\\'
      { failwith "Lexer error: illegal escape sequence" }
  | (eof | '\026')
      { failwith "Lexer error: unterminated string" }
  | ['\n' '\r']
      { failwith "Lexer error: newline in string" }
  | ['\000'-'\031' '\127' '\255']
      { failwith "Lexer error: invalid character in string" }
  | _
      { String (char (lexbuf.LexemeChar 0) :: chars) lexbuf }
